/* eslint-disable no-param-reassign */
/* eslint-disable no-shadow */
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import APP_URL, { ACCESS_KEY } from '../../helpers/axios';
import { ITopic, IPhoto } from '../../helpers/interfaces';
import { RootState } from '../store';
import { sortBy } from '../../helpers/arrays';

export type ILoadStatus = 'idle' | 'loading' | 'failed';
const AuthorizationKey = 'Client-ID';

// Api documentation : https://unsplash.com/documentation#list-photos

/* eslint-disable no-unused-vars */
export enum Status {
  Idle = 'idle',
  Loading = 'loading',
  Failed = 'failed'
}

interface IPhotos {
  [key: string] : IPhoto[]
}

export interface TvState {
  isGridActive : boolean;
  isPhotosInfoDisplayed : boolean;
  topics: ITopic[];
  photos : IPhotos
  topicsLoadingStatus: ILoadStatus;
  photosLoadingStatus: ILoadStatus;
}

const initialState: TvState = {
  isGridActive: false,
  isPhotosInfoDisplayed: false,
  topics: [],
  photos: {},
  topicsLoadingStatus: Status.Idle,
  photosLoadingStatus: Status.Idle,
};

export const fetchTopics = createAsyncThunk(
  'topics/fetchTopics',
  async () => {
    let response:any[] = [];
    await APP_URL.get(
      '/topics',
      {
        headers: { Authorization: `${AuthorizationKey} ${ACCESS_KEY}` },
      },
    )
      .then((res) => {
        if (res.status === 200) {
          response = res.data;
        }
      }).catch(() => {});
    // The value we return becomes the `fulfilled` action payload
    return response;
  },
);

export const fetchRelatedTopics = createAsyncThunk(
  'topics/fetchRelatedTopics',
  async (topicName : string) => {
    let response:any[] = [];
    await APP_URL.get(
      `/topics/${topicName}/photos`,
      {
        headers: { Authorization: `${AuthorizationKey} ${ACCESS_KEY}` },
      },
    )
      .then((res) => {
        if (res.status === 200) {
          response = res.data;
        }
      }).catch(() => {});
    // The value we return becomes the `fulfilled` action payload
    return response;
  },
);

export const fetchRelatedTopicsConcurrent = createAsyncThunk(
  'topics/fetchRelatedTopics',
  async (topicSlug : string[]) => {
    const response:IPhotos = {};
    const params = {
      per_page: 14,
      order_by: 'latest',
    };
    const photosUrls = topicSlug.map((slug) => APP_URL.get(
      `/topics/${slug}/photos`,
      {
        headers: { Authorization: `${AuthorizationKey} ${ACCESS_KEY}` },
        params,
      },
    ));
    await Promise.all(photosUrls).then((res) => {
      topicSlug.forEach((slug, index) => {
        response[slug] = res[index].data;
      });
    }).catch(() => {});
    // The value we return becomes the `fulfilled` action payload
    return response;
  },
);

export const tvSlice = createSlice({
  name: 'tv',
  initialState,
  reducers: {
    setGridActive: (state, { payload }: PayloadAction<boolean>) => {
      state.isGridActive = payload;
    },
    setShowPhotosInfo: (state, { payload }: PayloadAction<boolean>) => {
      state.isPhotosInfoDisplayed = payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchTopics.pending, (state) => {
        state.topicsLoadingStatus = Status.Loading;
      })
      .addCase(fetchTopics.fulfilled, (state, action) => {
        state.topicsLoadingStatus = Status.Idle;
        let sortedTopicsByTitle = [];
        if (action.payload.length) {
          sortedTopicsByTitle = sortBy(action.payload, 'title', 'ASC');
        }
        state.topics = sortedTopicsByTitle;
      })
      .addCase(fetchTopics.rejected, (state) => {
        state.topicsLoadingStatus = Status.Failed;
      })
      .addCase(fetchRelatedTopicsConcurrent.pending, (state) => {
        state.photosLoadingStatus = Status.Loading;
      })
      .addCase(fetchRelatedTopicsConcurrent.fulfilled, (state, action :any) => {
        state.photosLoadingStatus = Status.Idle;
        state.photos = action.payload;
      })
      .addCase(fetchRelatedTopicsConcurrent.rejected, (state) => {
        state.photosLoadingStatus = Status.Failed;
      });
  },
});

// eslint-disable-next-line no-empty-pattern
export const {
  setGridActive,
  setShowPhotosInfo,
} = tvSlice.actions;

export const selectTv = (state: RootState) => state.tv;

export default tvSlice.reducer;
